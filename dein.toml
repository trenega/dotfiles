# [dein.toml]
# Reference:
# https://woodyzootopia.github.io/2018/12/自分のVimのプラグイン環境設定-Dein/Denite/Deoplete を動かすまで

# dein.vim
[[plugins]]
repo = 'Shougo/dein.vim'

# denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = '''
  if !has('nvim')
          call dein#add('roxma/nvim-yarp')
          call dein#add('roxma/vim-hug-neovim-rpc')
  endif
'''
hook_add='''
  nnoremap <silent> <space>fr :<C-u>Denite file_mru<CR>
  nnoremap <silent> <space>fb :<C-u>Denite buffer<CR>
  nnoremap <silent> <space>fy :<C-u>Denite neoyank<CR>
  nnoremap <silent> <space>ff :<C-u>Denite file/rec<CR>
  nnoremap <silent> <space>fu :<C-u>Denite outline<CR>
'''

# unite-outline
[[plugins]]
repo = 'Shougo/unite-outline'

# neomru
[[plugins]]
repo = 'Shougo/neomru.vim'

# neoyank
[[plugins]]
repo = 'Shougo/neoyank.vim'

# vimdoc-ja
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# >>> Color scheme setting >>>

#[[plugins]]
# forest-night
#repo = 'sainnhe/forest-night'
#hook_add = '''
#        " important!!
#        set termguicolors
#
#        " the configuration options should be placed before `colorscheme forest-night`
#        "let g:forest_night_enable_italic = 1
#        let g:forest_night_disable_italic_comment = 1
#
#        colorscheme forest-night
#'''

#[[plugins]]
# lightline for forest-night
#repo = 'itchyny/lightline.vim'
#hook_add = '''
#        let g:lightline = {
#                \ 'colorscheme': 'forest_night'
#                \ }
#        set laststatus=2
#'''

#[[plugins]]
## lightline for gruvbox_material
#repo = 'itchyny/lightline.vim'
#hook_add = '''
#        let g:lightline = {
#                \ 'colorscheme': 'gruvbox_material'
#                \ }
#        set laststatus=2
#'''

# <<< Color scheme setting <<<

# lightline.vim
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
        let g:lightline = {
                \ 'colorscheme': 'jellybeans'
                \ }
        set laststatus=2
'''

# vim-unimpaired
[[plugins]]
repo = 'tpope/vim-unimpaired'

# fzf.vim (command-line fuzzy finder)
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
        nnoremap s :Buffers<CR>
        nnoremap t :Files<CR>
'''

# vim-eunuch
# Vim sugar for the UNIX shell commands that need it the most.
[[plugins]]
repo = 'tpope/vim-eunuch'

# vim-better-whitespace
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

# vim-commentary
[[plugins]]
repo = 'tpope/vim-commentary'

# vim-surround
# quoting/parenthesizing made simple
[[plugins]]
repo = 'tpope/vim-surround'

# vim-repeat
# enable repeating supported plugin maps with "."
[[plugins]]
repo = 'tpope/vim-repeat'

# memolist.vim
# This is a vimscript for create and manage memo.
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
        let g:memolist_path = "$HOME/memo"
        nnoremap <silent> <space>mn :MemoNew<CR>
        nnoremap <silent> <space>ml :MemoList<CR>
        nnoremap <silent> <space>mg :MemoGrep<CR>

'''

# >>> defx.nvim setting >>>
# The dark powered file explorer implementation

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
'''

# ryanosis/vim-devicons
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# kristijanhusak/defx-icons
[[plugins]]
repo = 'kristijanhusak/defx-icons'

# defx.nvim
[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ })

call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓'
      \ })

call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })

nnoremap <silent>fi :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction
'''
# <<< defx.nvim setting <<<

# END OF FILE: dein.toml

